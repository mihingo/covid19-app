{"version":3,"sources":["InfoBox.js","Map.js","Table.js","util.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","CardContent","Typography","color","className","Map","Table","countries","map","country","todayCases","sortData","data","sortedData","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","stateData","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setStateData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","name","iso2","getCountriesCovidData","onCountryChange","event","countryCode","target","url","FormControl","Select","variant","onChange","MenuItem","recovered","todayRecovered","deaths","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c96f283.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nfunction InfoBox({ title, cases, total }) {\n  return (\n    <Card>\n      <CardContent>\n        <Typography color=\"textSecondary\" className=\"infoBox__title\">\n          {title}\n        </Typography>\n        <h2 className=\"infoBox__cases\">{cases}</h2>\n        <Typography color=\"textSecondary\" className=\"infoBox__total\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\n\nfunction Map() {\n  return (\n    <div className=\"map\">\n      <h3>I'm a MAP</h3>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, todayCases, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>{todayCases}</td>\n          <td>\n            <strong>{cases}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","export const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => {\n    return a.cases > b.cases ? -1 : 1;\n  });\n  return sortedData;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./LineGraph.css\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, stateData) {\n        return numeral(tooltipItem.value).format(\"+0.0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n\n  ///data[casesType].forEach((date) =>\n  for (let date in data[casesType]) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\" }) {\n  const [stateData, setStateData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setStateData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className=\"linegraph__chart\">\n      {stateData?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,16,52,0.5\",\n                borderColor: \"#CC1034\",\n                data: stateData,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  useEffect(() => {\n    const getCountriesCovidData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          setCountries(countries);\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n        });\n    };\n    getCountriesCovidData();\n  }, [countries]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    //\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid19 Tracker App</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">WordWide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            title=\"Cases\"\n            total={countryInfo.cases}\n            cases={countryInfo.todayCases}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            total={countryInfo.recovered}\n            cases={countryInfo.todayRecovered}\n          />\n          <InfoBox\n            title=\"Deaths\"\n            total={countryInfo.deaths}\n            cases={countryInfo.todayDeaths}\n          />\n        </div>\n        <Map />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          {/* Table */}\n          <h3>Live Cases by Country</h3>\n          <tr className=\"app__tr\">\n            <td className=\"app__td\">\n              <strong>Country</strong>\n            </td>\n            <td className=\"app__td\">\n              <strong>New Cases</strong>\n            </td>\n            <td className=\"app__td\">\n              <strong>Total Cases</strong>\n            </td>\n          </tr>\n          <Table countries={tableData} />\n          <h3>Worldwide New Cases</h3>\n          <LineGraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}